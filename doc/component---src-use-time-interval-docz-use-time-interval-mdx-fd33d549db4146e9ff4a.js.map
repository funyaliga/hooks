{"version":3,"sources":["webpack:///../src/useTimeInterval/__docz__/useTimeInterval.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useTimeInterval","useToggle","React","counter","setCounter","run","toggleRun","pre","onClick","isMDXComponent"],"mappings":"8gBAQO,IAAMA,EAAe,Q,kOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,2CACA,2BAAU,mBAAGC,WAAW,KAAQ,CAC5B,KAAQ,4EADF,oDAGV,uBACA,iBAAQ,CACN,GAAM,OADR,OAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oEAOL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qXAA0XC,SAAO,GAClaL,QACAH,kBACAS,eACAC,oBACAC,eALka,gBAMlaX,IANka,EAOlaH,eAPka,GAQjaO,QAAQ,eACZ,WAAM,MAC6BQ,WAAe,GAAtCC,EADN,KACeC,EADf,OAEwBH,cAAlBI,EAFN,KAEWC,EAFX,KAOD,OAHAN,aAAgB,WACdI,GAAW,SAAAG,GAAG,OAAIA,EAAM,OACvBF,EAHW,IAGG,MACV,uBACP,gCAAYF,GACZ,sBAAQK,QAASF,GAAYD,EAAM,OAAS,mB,gOAQpDd,EAAWkB,gBAAiB","file":"component---src-use-time-interval-docz-use-time-interval-mdx-fd33d549db4146e9ff4a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/junli/work/fun/hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useTimeInterval, useToggle } from \"../../index\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usetimeinterval\"\n    }}>{`useTimeInterval`}</h1>\n    <p>{`timeInterval hooks`}</p>\n    <p>{`参考 `}<a parentName=\"p\" {...{\n        \"href\": \"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\"\n      }}>{`Making setInterval Declarative with React Hooks`}</a></p>\n    <hr />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`useTimeInterval(\n  callback: Function,\n  delay?: number\n);\n`}</code></pre>\n    <hr />\n    <h2 {...{\n      \"id\": \"demo\"\n    }}>{`DEMO`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const [counter, setCounter] = React.useState(0)\\n  const [run, toggleRun] = useToggle()\\n  const delay = 1000\\n  useTimeInterval(\\n    () => {\\n      setCounter(pre => pre + 1)\\n    },\\n    run ? delay : null,\\n  )\\n  return (\\n    <div>\\n      <h4>count: {counter}</h4>\\n      <button onClick={toggleRun}>{run ? \\'stop\\' : \\'start\\'}</button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useTimeInterval,\n      useToggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [counter, setCounter] = React.useState(0);\n        const [run, toggleRun] = useToggle();\n        const delay = 1000;\n        useTimeInterval(() => {\n          setCounter(pre => pre + 1);\n        }, run ? delay : null);\n        return <div>\n        <h4>count: {counter}</h4>\n        <button onClick={toggleRun}>{run ? 'stop' : 'start'}</button>\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}